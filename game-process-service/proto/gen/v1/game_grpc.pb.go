// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: game.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameProcessServiceClient is the client API for GameProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameProcessServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
}

type gameProcessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameProcessServiceClient(cc grpc.ClientConnInterface) GameProcessServiceClient {
	return &gameProcessServiceClient{cc}
}

func (c *gameProcessServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.GameProcessService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProcessServiceClient) Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error) {
	out := new(BetResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.GameProcessService/Bet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameProcessServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/proto.v1.GameProcessService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameProcessServiceServer is the server API for GameProcessService service.
// All implementations should embed UnimplementedGameProcessServiceServer
// for forward compatibility
type GameProcessServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Bet(context.Context, *BetRequest) (*BetResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
}

// UnimplementedGameProcessServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGameProcessServiceServer struct {
}

func (UnimplementedGameProcessServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedGameProcessServiceServer) Bet(context.Context, *BetRequest) (*BetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bet not implemented")
}
func (UnimplementedGameProcessServiceServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}

// UnsafeGameProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameProcessServiceServer will
// result in compilation errors.
type UnsafeGameProcessServiceServer interface {
	mustEmbedUnimplementedGameProcessServiceServer()
}

func RegisterGameProcessServiceServer(s grpc.ServiceRegistrar, srv GameProcessServiceServer) {
	s.RegisterService(&GameProcessService_ServiceDesc, srv)
}

func _GameProcessService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProcessServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.GameProcessService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProcessServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProcessService_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProcessServiceServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.GameProcessService/Bet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProcessServiceServer).Bet(ctx, req.(*BetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameProcessService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameProcessServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.v1.GameProcessService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameProcessServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameProcessService_ServiceDesc is the grpc.ServiceDesc for GameProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.GameProcessService",
	HandlerType: (*GameProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _GameProcessService_Join_Handler,
		},
		{
			MethodName: "Bet",
			Handler:    _GameProcessService_Bet_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _GameProcessService_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: state.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameStateServiceClient is the client API for GameStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameStateServiceClient interface {
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (GameStateService_StateClient, error)
}

type gameStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameStateServiceClient(cc grpc.ClientConnInterface) GameStateServiceClient {
	return &gameStateServiceClient{cc}
}

func (c *gameStateServiceClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (GameStateService_StateClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameStateService_ServiceDesc.Streams[0], "/proto.v1.GameStateService/State", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameStateServiceStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameStateService_StateClient interface {
	Recv() (*StateResponse, error)
	grpc.ClientStream
}

type gameStateServiceStateClient struct {
	grpc.ClientStream
}

func (x *gameStateServiceStateClient) Recv() (*StateResponse, error) {
	m := new(StateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameStateServiceServer is the server API for GameStateService service.
// All implementations should embed UnimplementedGameStateServiceServer
// for forward compatibility
type GameStateServiceServer interface {
	State(*StateRequest, GameStateService_StateServer) error
}

// UnimplementedGameStateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGameStateServiceServer struct {
}

func (UnimplementedGameStateServiceServer) State(*StateRequest, GameStateService_StateServer) error {
	return status.Errorf(codes.Unimplemented, "method State not implemented")
}

// UnsafeGameStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameStateServiceServer will
// result in compilation errors.
type UnsafeGameStateServiceServer interface {
	mustEmbedUnimplementedGameStateServiceServer()
}

func RegisterGameStateServiceServer(s grpc.ServiceRegistrar, srv GameStateServiceServer) {
	s.RegisterService(&GameStateService_ServiceDesc, srv)
}

func _GameStateService_State_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameStateServiceServer).State(m, &gameStateServiceStateServer{stream})
}

type GameStateService_StateServer interface {
	Send(*StateResponse) error
	grpc.ServerStream
}

type gameStateServiceStateServer struct {
	grpc.ServerStream
}

func (x *gameStateServiceStateServer) Send(m *StateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GameStateService_ServiceDesc is the grpc.ServiceDesc for GameStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.GameStateService",
	HandlerType: (*GameStateServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "State",
			Handler:       _GameStateService_State_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "state.proto",
}
